@using System.Timers
@using AuthenticatedUI.Services

@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    // Implementation of 5 minute disuse timeout logic

    private Timer? timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Retrieve the page inactivity timeout period from
            // the configuration file appsettings.json. Defaults
            // to 5 minutes (300 seconds) if not found there.

            var authProvider = AuthenticationStateProvider as JwtAuthStateProvider;
            int timeOut = authProvider?.InactivityTimeOut ?? 300;

            timer = new Timer
                {
                    Interval = timeOut * 1000,
                    AutoReset = false
                };
            timer.Elapsed += UpdateTimer;
            await JSRuntime.InvokeVoidAsync
                ("timeOutCall", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void TimerInterval()
    {
        timer?.Stop();
        timer?.Start();
    }

    private void UpdateTimer(object? src, ElapsedEventArgs elapsedEventArgs)
    {
        InvokeAsync(async () =>
        {
            var authProvider = AuthenticationStateProvider as JwtAuthStateProvider;
            if(authProvider != null)
                await authProvider.Logout();
            NavigationManager.NavigateTo("");
        });
    }
}
